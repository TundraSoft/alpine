name: Build and Test Docker Image

on:
  push:
    paths-ignore:
      - .dockerignore
      - .gitignore
      - .github/ISSUE_TEMPLATE/*
      - .github/PULL_REQUEST_TEMPLATE*
  pull_request:
    branches: [ main ]
  schedule:
    - 
      cron: '0 0 * * 0'

env:
  PACKAGES: "apk-tools ca-certificates ssl_client"
  ROOTFS_HASH: "91ceb95b020260832417b01e45ce02c3a250c4527835d1bdf486bf44f80287dc"
  ROOTFS_VERSION: "v0.7.0"
  POST_INSTALL: "./post-install.sh"

jobs:

  setup:
    runs-on: ubuntu-latest
    outputs:
      alpine-branches: ${{ steps.alpine-versions.outputs.alpine-branches }}
      latest-alpine-branch: ${{ steps.alpine-versions.outputs.latest-alpine-branch }}
      s6-versions: ${{ steps.s6-versions.outputs.s6-versions }}
      latest-s6-version: ${{ steps.s6-versions.outputs.latest-s6-version }}

    steps:
      - 
        name: Get Alpine Versions
        id: alpine-versions
        run: |
          LATEST_VERSION=$(curl -s https://cz.alpinelinux.org/alpine/latest-stable/releases/x86_64/latest-releases.yaml | awk '/branch:/ {print $2; exit}')
          ALPINE_BRANCHES="edge latest-stable "
          LIMIT=3
          ALL_BRANCHES=$(curl -s https://cz.alpinelinux.org/alpine/ | grep -oP '(?<=v)[^/]+(?=/")' | sort -V | tail -n 6)
          for BRANCH in $ALL_BRANCHES
          do
            if curl --output /dev/null --silent --head --fail "https://cz.alpinelinux.org/alpine/v${BRANCH}/releases/";
            then
              ALPINE_BRANCHES+="v${BRANCH} "
              LIMIT=$((LIMIT-1))
            fi
            if [ $LIMIT -le 0 ]; then
              break
            fi
          done
          ALPINE_BRANCHES=$(echo $ALPINE_BRANCHES | tr ' ' '\n' | jq -Rcn '[inputs] | sort | reverse')
          echo "alpine-branches=${ALPINE_BRANCHES}" >> "$GITHUB_OUTPUT"
          echo "latest-alpine-branch=${LATEST_VERSION}" >> "$GITHUB_OUTPUT"
          
      - 
        name: Get S6 Versions
        id: s6-versions
        run: |
          S6_VERSIONS=""
          # Fetch the latest 3 minor versions
          MINOR_VERSIONS=$(curl -s https://api.github.com/repos/just-containers/s6-overlay/releases | jq -r '.[].tag_name' | grep -oP '^v[0-9]+\.[0-9]+\.[0-9]+' | sort -Vu | tail -n 3)
          for VERSION in $MINOR_VERSIONS
          do
            # Fetch the latest patch version for each minor version
            PATCH_VERSION=$(curl -s https://api.github.com/repos/just-containers/s6-overlay/releases | jq -r '.[].tag_name' | grep "^${VERSION}" | sort -V | tail -n 1)
            S6_VERSIONS+="${PATCH_VERSION#v} "
          done
          S6_VERSIONS=$(echo $S6_VERSIONS | tr ' ' '\n' | jq -Rcn '[inputs] | sort | reverse')
          LATEST_VERSION=$(echo $S6_VERSIONS | tr ' ' '\n' | jq -r '.[0]')
          echo "s6-versions=${S6_VERSIONS}" >> "$GITHUB_OUTPUT"
          echo "latest-s6-version=${LATEST_VERSION}" >> "$GITHUB_OUTPUT"
      
  build:
    needs: setup
    runs-on: ubuntu-latest
      
    strategy:
      fail-fast: true
      matrix:
        alpine-branch: ${{ fromJson(needs.setup.outputs.alpine-branches) }}
        s6-version: ${{ fromJson(needs.setup.outputs.s6-versions) }}
    
    env:
      ALPINE_VERSION: $(curl -s https://cz.alpinelinux.org/alpine/${{ matrix.alpine-branch }}/releases/x86_64/latest-releases.yaml | awk '/version:/ {print $2; exit}')
    # env:
      # LATEST_ALPINE: "3.19"
      # ALPINE_PATCH_VERSION: 
      #   $(curl -s https://cz.alpinelinux.org/alpine/v${{ matrix.alpine-version }}/releases/x86_64/ | grep -oP '(?<=alpine-standard-)[0-9]+\.[0-9]+\.[0-9]+(?=-x86_64.iso)' | sort -V | uniq | tail -n 1)
      # BUILD_TAR: "/tmp/docker-${{ matrix.alpine-version }}/alpine-rootfs.tar.gz"
      # DOCKER_ROOT: "/tmp/docker-${{ matrix.alpine-version }}"
      # MKROOTFS: "/tmp/alpine-make-rootfs-${{ matrix.alpine-version }}"

    steps:
    - 
      uses: actions/checkout@v4
    
    - 
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - 
      name: Extract Docker Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        flavor: |
          latest=false
        images: |
          name=${{ github.repository }},enable=true
          name=ghcr.io/${{ github.repository }},enable=true
        labels: |
          org.opencontainers.image.source=${{ github.repositoryUrl }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=${{ github.event.repository.pushed_at }}
          org.opencontainers.image.authors=${{ github.actor }}
          org.opencontainers.image.branch=${{ github.ref }}
          org.opencontainers.image.vendor=Tundrasoft
          org.opencontainers.image.licenses=MIT
          org.opencontainers.image.documentation=${{ github.repositoryUrl }}/blob/main/README.md
          org.opencontainers.image.description=Alpine Linux with S6 Overlay
          org.opencontainers.image.title=Alpine Linux with S6 Overlay
        tags: |
          type=raw,prefix=,value=latest,enable=${{ ( matrix.alpine-branch == needs.setup.outputs.latest-alpine-branch && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)) }}
          type=raw,prefix=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) && '' || github.ref_name }},value=${{ matrix.alpine-branch }},enable=
          type=raw,prefix=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) && '' || github.ref_name }},value=${{ env.ALPINE_VERSION }},enable=
          type=raw,prefix=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) && '' || github.ref_name }},value=${{ env.ALPINE_VERSION }}-S6-${{ matrix.s6-version }},enable=

    - 
      name: Build Docker Image
      id: build-image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        platforms: linux/amd64,linux/arm/v7,linux/arm64
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          ALPINE_BRANCH=${{ matrix.alpine-branch }}
          ALPINE_VERSION=${{ env.ALPINE_VERSION }}
          S6_VERSION=${{ matrix.s6-version }}
    
    -
      name: Test Image
      run: |
        output=$(docker run --rm ${{ steps.build-image.outputs.imageid }} /bin/sh -c "cat /etc/alpine-release | grep -q ${{ matrix.alpine-version }} && echo 'OK' || echo 'KO'")
        if [ "$output" == "OK" ]; then
          echo "Test Passed"
        else
          echo "Test Failed"
          exit 1
        fi
    
    -
      name: Login to DockerHub
      uses: docker/login-action@v3 
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    -
      name: Login to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GIT_HUB_TOKEN }}
    
    # -
    #   name: Push Docker Image
    #   run: |
    #     repo_name=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
    #     docker push ${{ steps.build-image.outputs.imageid }}
    #     docker push $repo_name:${{ steps.meta.outputs.tags }}
    #     docker push ghcr.io/$repo_name:${{ steps.meta.outputs.tags }}