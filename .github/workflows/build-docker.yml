name: Build and Test Docker Image

on:
  push:
    paths-ignore:
      - .dockerignore
      - .gitignore
      - .github/ISSUE_TEMPLATE/*
      - .github/PULL_REQUEST_TEMPLATE*
  pull_request:
    branches: [ main ]
  schedule:
    - 
      cron: '0 0 * * 0'

jobs:

  setup:
    runs-on: ubuntu-latest
    outputs:
      alpine-versions: ${{ steps.alpine-versions.outputs.alpine-versions }}
      s6-versions: ${{ steps.s6-versions.outputs.s6-versions }}
      latest-alpine-version: ${{ steps.alpine-versions.outputs.latest-alpine-version }}
      latest-s6-version: ${{ steps.s6-versions.outputs.latest-s6-version }}
    steps:
      - 
        name: Get Alpine Versions
        id: alpine-versions
        run: |
          ALPINE_MINOR_VERSIONS=$(curl -s https://cz.alpinelinux.org/alpine/ | grep -oP '(?<=v)[^/]+(?=/")' | sort -V | tail -n 3)
          ALPINE_VERSIONS=""
          for VERSION in $ALPINE_MINOR_VERSIONS
          do
            PATCH_VERSIONS=$(curl -s https://cz.alpinelinux.org/alpine/v${VERSION}/releases/x86_64/ | grep -oP '(?<=alpine-standard-)[0-9]+\.[0-9]+\.[0-9]+(?=-x86_64.iso)' | sort -V | uniq | tail -n 3)
            for PATCH in $PATCH_VERSIONS
            do
              ALPINE_VERSIONS+="${PATCH} "
            done
          done
          ALPINE_VERSIONS=$(echo $ALPINE_VERSIONS | tr ' ' '\n' | jq -Rcn '[inputs] | sort | reverse')
          LATEST_VERSION=$(echo $ALPINE_VERSIONS | tr ' ' '\n' | jq -r '.[0]')
          echo "alpine-versions=${ALPINE_VERSIONS}" >> "$GITHUB_OUTPUT"
          echo "latest-alpine-version=${LATEST_VERSION}" >> "$GITHUB_OUTPUT"
          
      - 
        name: Get S6 Versions
        id: s6-versions
        run: |
          S6_VERSIONS=""
          # Fetch the latest 3 minor versions
          MINOR_VERSIONS=$(curl -s https://api.github.com/repos/just-containers/s6-overlay/releases | jq -r '.[].tag_name' | grep -oP '^v[0-9]+\.[0-9]+\.[0-9]+' | sort -Vu | tail -n 3)
          for VERSION in $MINOR_VERSIONS
          do
            # Fetch the latest patch version for each minor version
            PATCH_VERSION=$(curl -s https://api.github.com/repos/just-containers/s6-overlay/releases | jq -r '.[].tag_name' | grep "^${VERSION}" | sort -V | tail -n 1)
            S6_VERSIONS+="${PATCH_VERSION#v} "
          done
          S6_VERSIONS=$(echo $S6_VERSIONS | tr ' ' '\n' | jq -Rcn '[inputs] | sort | reverse')
          LATEST_VERSION=$(echo $S6_VERSIONS | tr ' ' '\n' | jq -r '.[0]')
          echo "s6-versions=${S6_VERSIONS}" >> "$GITHUB_OUTPUT"
          echo "latest-s6-version=${LATEST_VERSION}" >> "$GITHUB_OUTPUT"
      
      - 
        name: Debug
        run: |
          cat $GITHUB_OUTPUT
      
      -
        name: Alpine Latest
        run: |
          echo ${{ steps.alpine-versions.outputs.latest-alpine-version }}
      
      -
        name: S6 Latest
        run: |
          echo ${{ steps.s6-versions.outputs.latest-s6-version }}
  
  test:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        alpine-version: ${{ fromJson(needs.setup.outputs.alpine-versions) }}
        s6-version: ${{ fromJson(needs.setup.outputs.s6-versions) }}
    steps:
    - 
      uses: actions/checkout@v2
    
    - 
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    
    -
      name: Meta Tags
      id: meta-tags
      uses: docker/metadata-action@v5
      with:
        flavor: |
          latest=false
        # list of Docker images to use as base name for tags
        images: |
          name=${{ github.repository }},enable=true
          name=ghcr.io/${{ github.repository }},enable=true
        # generate Docker tags based on the following events/attributes
        # type=sha,prefix=,suffix=,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
        labels: |
          org.opencontainers.image.source=${{ github.repositoryUrl }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=${{ github.event.repository.pushed_at }}
          org.opencontainers.image.authors=${{ github.actor }}
          org.opencontainers.image.vendor=Tundrasoft
          org.opencontainers.image.licenses=MIT
          org.opencontainers.image.documentation=${{ github.repositoryUrl }}/blob/main/README.md
          org.opencontainers.image.description=Alpine Linux with S6 Overlay
          org.opencontainers.image.title=Alpine Linux with S6 Overlay
        tags: |
          type=raw,prefix=,value=latest,enable=${{ (matrix.alpine-version == needs.setup.outputs.latest-alpine-version && matrix.s6-version == needs.setup.outputs.latest-s6-version) }}
          type=semver,prefix=,pattern={{major}}.{{minor}},value=${{ matrix.alpine-version }},enable=${{ (matrix.alpine-version == needs.setup.outputs.latest-alpine-version) && github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
          type=raw,prefix=,value=alpine-${{ matrix.alpine-version }}-S6-${{ matrix.s6-version }},suffix=,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
    
    -
      name: Build for Test
      id: build
      uses: docker/build-push-action@v2
      with:
        context: .
        load: true
        tags: |
          local/alpine2:test
        build-args: | 
          ALPINE_VERSION=${{ matrix.alpine-version }}
          S6_OVERLAY_VERSION=${{ matrix.s6-version }}
    
    -
      name: Test
      run: |
        output=$(docker run --rm local/alpine2:test /bin/sh -c "cat /etc/alpine-release | grep -q ${{ matrix.alpine-version }} && echo 'OK' || echo 'KO'")
        if [ "$output" == "OK" ]; then
          echo "Test Passed"
        else
          echo "Test Failed"
          exit 1
        fi
  
  publish:
    if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
    needs: [setup, test]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        alpine-version: ${{ fromJson(needs.setup.outputs.alpine-versions) }}
        s6-version: ${{ fromJson(needs.setup.outputs.s6-versions) }}
    steps:
    
    - 
      uses: actions/checkout@v2

    - 
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    -
      name: Login to DockerHub
      uses: docker/login-action@v3 
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    -
      name: Login to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GIT_HUB_TOKEN }}

    -
      name: Meta Tags
      id: meta-tags
      uses: docker/metadata-action@v5
      with:
        flavor: |
          latest=false
        # list of Docker images to use as base name for tags
        images: |
          name=${{ github.repository }},enable=true
          name=ghcr.io/${{ github.repository }},enable=true
        # generate Docker tags based on the following events/attributes
        # type=sha,prefix=,suffix=,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
        labels: |
          org.opencontainers.image.source=${{ github.repositoryUrl }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=${{ github.event.repository.pushed_at }}
          org.opencontainers.image.authors=${{ github.actor }}
          org.opencontainers.image.vendor=Tundrasoft
          org.opencontainers.image.licenses=MIT
          org.opencontainers.image.documentation=${{ github.repositoryUrl }}/blob/main/README.md
          org.opencontainers.image.description=Alpine Linux with S6 Overlay
          org.opencontainers.image.title=Alpine Linux with S6 Overlay
        tags: |
          type=raw,prefix=,value=latest,enable=${{ (matrix.alpine-version == needs.setup.outputs.latest-alpine-version && matrix.s6-version == needs.setup.outputs.latest-s6-version) && github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
          type=semver,prefix=,pattern={{major}}.{{minor}},value=${{ matrix.alpine-version }},enable=${{ (matrix.alpine-version == needs.setup.outputs.latest-alpine-version) && github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
          type=raw,prefix=,value=alpine-${{ matrix.alpine-version }}-S6-${{ matrix.s6-version }},suffix=,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}

    - 
      name: Push
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm/v8,linux/arm/v7
        provenance: false
        build-args: |
          ALPINE_VERSION=${{ matrix.alpine-version }}
          S6_OVERLAY_VERSION=${{ matrix.s6-version }}
        push: true
        tags: ${{ steps.meta-tags.outputs.tags }}
        labels: ${{ steps.meta-tags.outputs.labels }}
  
  chore:
    needs: publish
    if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
    runs-on: ubuntu-latest
    steps:
      - 
        uses: actions/checkout@v2
        
      -
        name: Update repo description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: ${{ github.repository }}
  
  dispatch:
    needs: publish
    # Call only if from main branch
    if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
    strategy:
      matrix:
        repo: ['TundraSoft/deno', 'TundraSoft/nginx']
    runs-on: ubuntu-latest
    steps:
      - 
        name: Repository Dispatch
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GIT_HUB_TOKEN }}
          repository: ${{ matrix.repo }}
          event-type: build
