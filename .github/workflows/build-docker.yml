name: Build and Test Docker Image

on:
  push:
    paths-ignore:
      - .dockerignore
      - .gitignore
      - .github/ISSUE_TEMPLATE/*
      - .github/PULL_REQUEST_TEMPLATE*
  pull_request:
    branches: [ main ]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      alpine-versions: ${{ steps.alpine-versions.outputs.alpine-versions }}
      s6-versions: ${{ steps.s6-versions.outputs.s6-versions }}
    steps:
      - 
        name: Get Alpine Versions
        id: alpine-versions
        run: |
          ALPINE_VERSIONS=$(curl -s https://cz.alpinelinux.org/alpine/ | grep -oP '(?<=v)[^/]+(?=/")' | sort -V | tail -n 5 | tac | jq -Rcn '[inputs]')
          echo "alpine-versions=${ALPINE_VERSIONS}" >> "$GITHUB_OUTPUT"
      - 
        name: Get S6 Versions
        id: s6-versions
        run: |
          S6_VERSIONS=$(curl -s https://api.github.com/repos/just-containers/s6-overlay/releases | jq -r '.[].tag_name' | grep -vE "rc|alpha" | sort -V | tail -n 3 | tac | sed 's/v//g' | jq -Rcn '[inputs]')
          echo "s6-versions=${S6_VERSIONS}" >> "$GITHUB_OUTPUT"

  build:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        alpine-version: ${{ fromJson(needs.setup.outputs.alpine-versions) }}
        s6-version: ${{ fromJson(needs.setup.outputs.s6-versions) }}
    steps:
    - uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    -
      name: Login to DockerHub
      if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch) && github.event_name != 'pull_request'
      uses: docker/login-action@v3 
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    -
      name: Login to GHCR
      if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch) && github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GIT_HUB_TOKEN }}
    -
      name: Debug
      run: |
        echo "alpine-version=${{ matrix.alpine-version }}"
        echo "s6-version=${{ matrix.s6-version }}"
        echo "latest=${{ (matrix.alpine-version == fromJson(needs.setup.outputs.alpine-versions)[0] && matrix.s6-version == fromJson(needs.setup.outputs.s6-versions)[0]) && 'tundrasoft/alpine2:latest, ghcr.io/tundrasoft/alpine2:latest' }}"
    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        push: false
        platforms: linux/amd64,linux/arm64
        tags: |
          tundrasoft/alpine2:alpine-${{ matrix.alpine-version }}-s6-${{ matrix.s6-version }}
          ghcr.io/tundrasoft/alpine2:alpine-${{ matrix.alpine-version }}-s6-${{ matrix.s6-version }}
          ${{ (matrix.alpine-version == fromJson(needs.setup.outputs.alpine-versions)[0] && matrix.s6-version == fromJson(needs.setup.outputs.s6-versions)[0]) && 'tundrasoft/alpine2:latest, ghcr.io/tundrasoft/alpine2:latest' }}
        build-args: 
          ALPINE_VERSION=${{ matrix.alpine-version }}
          S6_OVERLAY_VERSION=${{ matrix.s6-version }}

    - name: Test
      run: |
        docker pull ${{ github.repository }}2:alpine-${{ matrix.alpine-version }}-s6-${{ matrix.s6-version }}
        output=$(docker run --rm ${{ github.repository }}2:alpine-${{ matrix.alpine-version }}-s6-${{ matrix.s6-version }} /bin/sh -c "cat /etc/alpine-release | grep -q ${{ matrix.alpine-version }} && echo 'OK' || echo 'KO'")
          if [ "$output" == "OK" ]; then
            echo "Test Passed"
          else
            echo "Test Failed"
            exit 1
          fi