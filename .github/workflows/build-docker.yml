name: Build and Test Docker Image

on:
  push:
    paths-ignore:
      - .dockerignore
      - .gitignore
      - .github/ISSUE_TEMPLATE/*
      - .github/PULL_REQUEST_TEMPLATE*
      - ./README.md
      - ./LICENSE
  pull_request:
    branches: [ main ]
  schedule:
    - 
      cron: '0 0 * * 0'

jobs:

  setup:
    runs-on: ubuntu-latest
    outputs:
      alpine-branches: ${{ steps.alpine-versions.outputs.alpine-branches }}
      latest-alpine-branch: ${{ steps.alpine-versions.outputs.latest-alpine-branch }}
      s6-versions: ${{ steps.s6-versions.outputs.s6-versions }}
      latest-s6-version: ${{ steps.s6-versions.outputs.latest-s6-version }}

    steps:
      - 
        name: Get Alpine Versions
        id: alpine-versions
        run: |
          LATEST_VERSION=$(curl -s https://cz.alpinelinux.org/alpine/latest-stable/releases/x86_64/latest-releases.yaml | awk '/branch:/ {print $2; exit}')
          ALPINE_BRANCHES="edge "
          LIMIT=3
          ALL_BRANCHES=$(curl -s https://cz.alpinelinux.org/alpine/ | grep -oP '(?<=v)[^/]+(?=/")' | sort -V | tail -n 6 | tac)
          for BRANCH in $ALL_BRANCHES
          do
            if curl --output /dev/null --silent --head --fail "https://cz.alpinelinux.org/alpine/v${BRANCH}/releases/";
            then
              ALPINE_BRANCHES+="v${BRANCH} "
              LIMIT=$((LIMIT-1))
            fi
            if [ $LIMIT -le 0 ]; then
              break
            fi
          done
          ALPINE_BRANCHES=$(echo $ALPINE_BRANCHES | tr ' ' '\n' | jq -Rcn '[inputs] | sort | reverse')
          echo "alpine-branches=${ALPINE_BRANCHES}" >> "$GITHUB_OUTPUT"
          echo "latest-alpine-branch=${LATEST_VERSION}" >> "$GITHUB_OUTPUT"
          
      - 
        name: Get S6 Versions
        id: s6-versions
        run: |
          S6_VERSIONS=""
          # Fetch the latest 3 minor versions
          MINOR_VERSIONS=$(curl -s https://api.github.com/repos/just-containers/s6-overlay/releases | jq -r '.[].tag_name' | grep -oP '^v[0-9]+\.[0-9]+\.[0-9]+' | sort -Vu | tail -n 3)
          for VERSION in $MINOR_VERSIONS
          do
            # Fetch the latest patch version for each minor version
            PATCH_VERSION=$(curl -s https://api.github.com/repos/just-containers/s6-overlay/releases | jq -r '.[].tag_name' | grep "^${VERSION}" | sort -V | tail -n 1)
            S6_VERSIONS+="${PATCH_VERSION#v} "
          done
          S6_VERSIONS=$(echo $S6_VERSIONS | tr ' ' '\n' | jq -Rcn '[inputs] | sort | reverse')
          LATEST_VERSION=$(echo $S6_VERSIONS | tr ' ' '\n' | jq -r '.[0]')
          echo "s6-versions=${S6_VERSIONS}" >> "$GITHUB_OUTPUT"
          echo "latest-s6-version=${LATEST_VERSION}" >> "$GITHUB_OUTPUT"
      
  build:
    needs: setup
    runs-on: ubuntu-latest
      
    strategy:
      fail-fast: true
      matrix:
        alpine-branch: ${{ fromJson(needs.setup.outputs.alpine-branches) }}
        s6-version: ${{ fromJson(needs.setup.outputs.s6-versions) }}
    
    env:
      ALPINE_VERSION: 
      TEST_TAG: alpine-s6
    
    steps:
    - 
      uses: actions/checkout@v4
    
    - 
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    -
      name: Get the ALPINE VERSION
      run: |
        echo "ALPINE_VERSION=$(curl -s https://cz.alpinelinux.org/alpine/${{ matrix.alpine-branch }}/releases/x86_64/latest-releases.yaml | awk '/version:/ {print $2; exit}')" >> $GITHUB_ENV
    
    - 
      name: Extract Docker Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        flavor: |
          latest=false
        images: |
          name=${{ github.repository }},enable=true
          name=ghcr.io/${{ github.repository }},enable=true
        labels: |
          org.opencontainers.image.source=${{ github.repositoryUrl }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=${{ github.event.repository.pushed_at }}
          org.opencontainers.image.authors=${{ github.actor }}
          org.opencontainers.image.branch=${{ github.ref_name }}
          org.opencontainers.image.vendor=Tundrasoft
          org.opencontainers.image.licenses=MIT
          org.opencontainers.image.documentation=${{ github.repositoryUrl }}/blob/main/README.md
          org.opencontainers.image.description=Alpine Linux with S6 Overlay
          org.opencontainers.image.title=Alpine Linux with S6 Overlay
        tags: |
          type=raw,prefix=,value=latest,enable=${{ ( matrix.alpine-branch == needs.setup.outputs.latest-alpine-branch && matrix.s6-version == needs.setup.outputs.latest-s6-version && github.ref_name == github.event.repository.default_branch) }}
          type=semver,prefix=${{ github.ref_name == github.event.repository.default_branch && '' || format('{0}-', github.ref_name) }},pattern={{major}}.{{minor}},value=${{ env.ALPINE_VERSION }},enable=${{ matrix.alpine-branch != 'edge' }}
          type=semver,prefix=${{ github.ref_name == github.event.repository.default_branch && '' || format('{0}-', github.ref_name) }},pattern={{major}}.{{minor}}.{{patch}},value=${{ env.ALPINE_VERSION }},enable=${{ matrix.alpine-branch != 'edge' }}
          type=raw,prefix=${{ github.ref_name == github.event.repository.default_branch && '' || format('{0}-', github.ref_name) }},value=${{ format('{0}-{1}', matrix.alpine-branch, env.ALPINE_VERSION) }},enable=${{ matrix.alpine-branch == 'edge' }}
          type=raw,prefix=${{ github.ref_name == github.event.repository.default_branch && '' || format('{0}-', github.ref_name) }},value=${{ format('{0}', matrix.alpine-branch) }},enable=${{ matrix.alpine-branch == 'edge' }}
          #s6 tags
          type=raw,prefix=${{ github.ref_name == github.event.repository.default_branch && '' || format('{0}-', github.ref_name) }},value=${{ format('edge-{0}-S6-{1}', env.ALPINE_VERSION, matrix.s6-version) }},enable=${{ matrix.alpine-branch == 'edge' }}
          type=raw,prefix=${{ github.ref_name == github.event.repository.default_branch && '' || format('{0}-', github.ref_name) }},value=${{ format('{0}-S6-{1}', env.ALPINE_VERSION, matrix.s6-version) }},enable=${{ matrix.alpine-branch != 'edge' }}

    - 
      name: Build Test Image
      id: build-image
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        tags: ${{ env.TEST_TAG }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          ALPINE_BRANCH=${{ matrix.alpine-branch }}
          ALPINE_VERSION=${{ env.ALPINE_VERSION }}
          S6_VERSION=${{ matrix.s6-version }}
    
    -
      name: Test Image
      run: |
        output=$(docker run --rm ${{ env.TEST_TAG}} /bin/sh -c "cat /etc/alpine-release | grep -q ${{ env.ALPINE_VERSION }} && echo 'OK' || echo 'KO'")
        if [ "$output" == "OK" ]; then
          echo "Test Passed"
        else
          echo "Test Failed"
          exit 1
        fi
    
    -
      name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    -
      name: Login to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GIT_HUB_TOKEN }}
    
    - 
      name: Build and Push
      id: build-push
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        #,linux/arm/v7
        platforms: linux/amd64,linux/arm64,linux/arm/v7
        provenance: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          ALPINE_BRANCH=${{ matrix.alpine-branch }}
          ALPINE_VERSION=${{ env.ALPINE_VERSION }}
          S6_VERSION=${{ matrix.s6-version }}
  
  chore:
    needs: build
    if: github.ref_name == github.event.repository.default_branch
    runs-on: ubuntu-latest
    steps:
      - 
        uses: actions/checkout@v4
        
      -
        name: Update repo description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: ${{ github.repository }}
  
  dispatch:
    needs: build
    # Call only if from main branch
    if: github.ref_name == github.event.repository.default_branch
    strategy:
      matrix:
        repo: ['TundraSoft/deno', 'TundraSoft/nginx']
    runs-on: ubuntu-latest
    steps:
      - 
        name: Repository Dispatch
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.GIT_HUB_TOKEN }}
          repository: ${{ matrix.repo }}
          event-type: build