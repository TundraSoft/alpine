name: Build and Test Docker Image

on:
  push:
    paths-ignore:
      - .dockerignore
      - .gitignore
      - .github/ISSUE_TEMPLATE/*
      - .github/PULL_REQUEST_TEMPLATE*
  pull_request:
    branches: [ main ]
  schedule:
    - 
      cron: '0 0 * * 0'

env:
  PACKAGES: "apk-tools ca-certificates ssl_client"
  ROOTFS_HASH: "91ceb95b020260832417b01e45ce02c3a250c4527835d1bdf486bf44f80287dc"
  ROOTFS_VERSION: "v0.7.0"
  POST_INSTALL: "./post-install.sh"

jobs:

  setup:
    runs-on: ubuntu-latest
    outputs:
      # alpine-versions: ${{ steps.alpine-versions.outputs.alpine-versions }}
      # latest-alpine-version: ${{ steps.alpine-versions.outputs.latest-alpine-version }}
      s6-versions: ${{ steps.s6-versions.outputs.s6-versions }}
      latest-s6-version: ${{ steps.s6-versions.outputs.latest-s6-version }}

    steps:
      # - 
      #   name: Get Alpine Versions
      #   id: alpine-versions
      #   run: |
      #     ALPINE_MINOR_VERSIONS=$(curl -s https://cz.alpinelinux.org/alpine/ | grep -oP '(?<=v)[^/]+(?=/")' | sort -V | tail -n 3)
      #     ALPINE_VERSIONS=""
      #     for VERSION in $ALPINE_MINOR_VERSIONS
      #     do
      #       ALPINE_VERSIONS+="${VERSION} "
      #       PATCH_VERSIONS=$(curl -s https://cz.alpinelinux.org/alpine/v${VERSION}/releases/x86_64/ | grep -oP '(?<=alpine-standard-)[0-9]+\.[0-9]+\.[0-9]+(?=-x86_64.iso)' | sort -V | uniq | tail -n 0)
      #       for PATCH in $PATCH_VERSIONS
      #       do
      #         ALPINE_VERSIONS+="${PATCH} "
      #       done
      #     done
      #     ALPINE_VERSIONS=$(echo $ALPINE_VERSIONS | tr ' ' '\n' | jq -Rcn '[inputs] | sort | reverse')
      #     LATEST_VERSION=$(echo $ALPINE_VERSIONS | tr ' ' '\n' | jq -r '.[0]')
      #     echo "alpine-versions=${ALPINE_VERSIONS}" >> "$GITHUB_OUTPUT"
      #     echo "latest-alpine-version=${LATEST_VERSION}" >> "$GITHUB_OUTPUT"
          
      - 
        name: Get S6 Versions
        id: s6-versions
        run: |
          S6_VERSIONS=""
          # Fetch the latest 3 minor versions
          MINOR_VERSIONS=$(curl -s https://api.github.com/repos/just-containers/s6-overlay/releases | jq -r '.[].tag_name' | grep -oP '^v[0-9]+\.[0-9]+\.[0-9]+' | sort -Vu | tail -n 3)
          for VERSION in $MINOR_VERSIONS
          do
            # Fetch the latest patch version for each minor version
            PATCH_VERSION=$(curl -s https://api.github.com/repos/just-containers/s6-overlay/releases | jq -r '.[].tag_name' | grep "^${VERSION}" | sort -V | tail -n 1)
            S6_VERSIONS+="${PATCH_VERSION#v} "
          done
          S6_VERSIONS=$(echo $S6_VERSIONS | tr ' ' '\n' | jq -Rcn '[inputs] | sort | reverse')
          LATEST_VERSION=$(echo $S6_VERSIONS | tr ' ' '\n' | jq -r '.[0]')
          echo "s6-versions=${S6_VERSIONS}" >> "$GITHUB_OUTPUT"
          echo "latest-s6-version=${LATEST_VERSION}" >> "$GITHUB_OUTPUT"
      
  test:
    needs: setup
    runs-on: ubuntu-latest
      
    strategy:
      fail-fast: true
      matrix:
        alpine-version: ["3.19", "3.18", "3.17", "3.16", "3.15"]
        s6-version: ${{ fromJson(needs.setup.outputs.s6-versions) }}
    
    env:
      LATEST_ALPINE: "3.19"
      ALPINE_PATCH_VERSION: 
        $(curl -s https://cz.alpinelinux.org/alpine/v${{ matrix.alpine-version }}/releases/x86_64/ | grep -oP '(?<=alpine-standard-)[0-9]+\.[0-9]+\.[0-9]+(?=-x86_64.iso)' | sort -V | uniq | tail -n 1)
      BUILD_TAR: "/tmp/docker-${{ matrix.alpine-version }}/alpine-rootfs.tar.gz"
      DOCKER_ROOT: "/tmp/docker-${{ matrix.alpine-version }}"
      MKROOTFS: "/tmp/alpine-make-rootfs-${{ matrix.alpine-version }}"

    steps:
    - 
      uses: actions/checkout@v4
    
    -
      run: |
        echo ${{ env.ALPINE_PATCH_VERSION }}
    
    -
      name: Fetch MakeRootFS Util
      id: fetch-makerootfs
      run: |
        wget https://raw.githubusercontent.com/alpinelinux/alpine-make-rootfs/${{ env.ROOTFS_VERSION }}/alpine-make-rootfs -O "${{ env.MKROOTFS }}"
        echo "${{ env.ROOTFS_HASH }}  ${{ env.MKROOTFS }}" | sha256sum -c -
        chmod +x ${{ env.MKROOTFS }}
    
    - 
      name: Build Filesystem
      id: build-fs
      run: |
        mkdir ${{ env.DOCKER_ROOT }}
        sudo ${{ env.MKROOTFS }} --mirror-uri https://dl-cdn.alpinelinux.org/alpine \
          --branch "v${{ matrix.alpine-version }}" \
          --packages "${{ env.PACKAGES }}" \
          --script-chroot \
          "${{ env.BUILD_TAR }}" \
          "${{ env.POST_INSTALL }}"
    
    - 
      name: Copy Files
      id: copy-files
      run: |
        cp -r s6-setup.sh rootfs ${{ env.DOCKER_ROOT }}
    
    - 
      name: Prepare Dockerfile
      id: prepare-dockerfile
      run: |
        cat <<DOCKERFILE > "${{ env.DOCKER_ROOT }}/Dockerfile"
        FROM scratch
        ARG TARGETPLATFORM \
            TARGETARCH \
            TARGETVARIANT \
            S6_OVERLAY_VERSION=${{ matrix.s6-version }} \
            PUID=1000 \
            PGID=1000 \ 
            TZ="UTC" \
            S6_GLOBAL_PATH="/command:/usr/bin:/bin:/usr/sbin" \
            S6_CMD_WAIT_FOR_SERVICES_MAXTIME=0 \
            PATH="/scripts/bin:$PATH" \
            LANG=C.UTF-8
        ENV PUID=${PUID} \
            PGID=${PGID} \ 
            TZ=${TZ} \
            S6_GLOBAL_PATH=${S6_GLOBAL_PATH} \
            S6_CMD_WAIT_FOR_SERVICES_MAXTIME=0 \
            PATH=${PATH} \
            LANG=${LANG}
        ADD $(basename ${{ env.BUILD_TAR }}) /
        ADD /rootfs /
        COPY s6-setup.sh /
        RUN /s6-setup.sh && rm -rf /s6-setup.sh
        ENTRYPOINT [ "/init" ]
        DOCKERFILE

    - 
      name: Extract Docker Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        flavor: |
          latest=false
        images: |
          name=${{ github.repository }},enable=true
          name=ghcr.io/${{ github.repository }},enable=true
        labels: |
          org.opencontainers.image.source=${{ github.repositoryUrl }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=${{ github.event.repository.pushed_at }}
          org.opencontainers.image.authors=${{ github.actor }}
          org.opencontainers.image.vendor=Tundrasoft
          org.opencontainers.image.licenses=MIT
          org.opencontainers.image.documentation=${{ github.repositoryUrl }}/blob/main/README.md
          org.opencontainers.image.description=Alpine Linux with S6 Overlay
          org.opencontainers.image.title=Alpine Linux with S6 Overlay
        tags: |
          type=raw,prefix=,value=latest,enable=${{ (matrix.alpine-version == env.LATEST_ALPINE && matrix.s6-version == needs.setup.outputs.latest-s6-version) && github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
          type=raw,prefix=,value=${{ matrix.alpine-version }},enable=${{ matrix.s6-version == needs.setup.outputs.latest-s6-version && github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
          type=semver,prefix=,pattern={{major}}.{{minor}}.{{patch}},value=${{ env.ALPINE_PATCH_VERSION }},enable=${{ (matrix.s6-version == needs.setup.outputs.latest-s6-version) && github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
          type=semver,prefix=,pattern={{major}}.{{minor}},value=${{ env.ALPINE_PATCH_VERSION }},enable=${{ (matrix.s6-version == needs.setup.outputs.latest-s6-version) && github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
          type=raw,prefix=,value=alpine-${{ matrix.alpine-version }}-S6-${{ matrix.s6-version }},suffix=,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
          #non main branch
          type=raw,prefix=${{ github.ref_name }}-,value=${{ matrix.alpine-version }},enable=${{ matrix.s6-version == needs.setup.outputs.latest-s6-version && github.ref != format('refs/heads/{0}', github.event.repository.default_branch) }}
          type=semver,prefix=${{ github.ref_name }}-,pattern={{major}}.{{minor}}.{{patch}},value=${{ env.ALPINE_PATCH_VERSION }},enable=${{ (matrix.s6-version == needs.setup.outputs.latest-s6-version) && github.ref != format('refs/heads/{0}', github.event.repository.default_branch) }}
          type=semver,prefix=${{ github.ref_name }}-,pattern={{major}}.{{minor}},value=${{ env.ALPINE_PATCH_VERSION }},enable=${{ (matrix.s6-version == needs.setup.outputs.latest-s6-version) && github.ref != format('refs/heads/{0}', github.event.repository.default_branch) }}
          type=raw,prefix=${{ github.ref_name }}-,value=alpine-${{ matrix.alpine-version }}-S6-${{ matrix.s6-version }},suffix=,enable=${{ github.ref != format('refs/heads/{0}', github.event.repository.default_branch) }}

    - 
      name: Build Docker Image
      id: build-image
      uses: docker/build-push-action@v5
      with:
        context: ${{ env.DOCKER_ROOT }}
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
    
    -
      name: Test Image
      run: |
        output=$(docker run --rm ${{ steps.build-image.outputs.imageid }} /bin/sh -c "cat /etc/alpine-release | grep -q ${{ matrix.alpine-version }} && echo 'OK' || echo 'KO'")
        if [ "$output" == "OK" ]; then
          echo "Test Passed"
        else
          echo "Test Failed"
          exit 1
        fi
    
    -
      name: Login to DockerHub
      uses: docker/login-action@v3 
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    -
      name: Login to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GIT_HUB_TOKEN }}
    
    -
      name: Push
      uses: docker/build-push-action@v5
      with:
        context: .
        # platforms: linux/amd64,linux/arm/v8,linux/arm/v7
        platforms: linux/amd64,linux/arm/v8,linux/arm/v7,linux/arm/v6
        provenance: false
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}